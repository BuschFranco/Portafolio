---
import '../styles/global.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {currentLocale} = Astro;

let titleEn;
let descriptionEn;

if(currentLocale == "en"){
	titleEn = "Web & Software Developer";
	descriptionEn = "Web and Software Developer, specialized in creating websites and applications for businesses and SMEs. Through my web development agency, I offer a portfolio of customized solutions that include everything from website design and development to mobile app programming. With experience in technologies like PHP, JavaScript, and Dynamics 365, I provide comprehensive services as a full stack developer. If you're looking to buy a website or create a custom solution for your business, I'm here to help."
} else{
	titleEn = "Desarrollos Web y de Software";
	descriptionEn = "Desarrollador Web y de Software, especializado en la creación de páginas web y aplicaciones para empresas y pymes. A través de mi agencia de desarrollo web, ofrezco un portafolio de soluciones personalizadas que incluyen desde el diseño y desarrollo de sitios web hasta la programación de aplicaciones móviles. Con experiencia en tecnologías como PHP, JavaScript y Dynamics 365, brindo servicios completos como desarrollador full stack. Si buscas comprar una página web o crear una solución a medida para tu negocio, estoy aquí para ayudarte."
}

let {
	title = 'Busch Franco | ' + titleEn,
	description = descriptionEn,
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/webp" href="/logo.webp" />
<link rel="shortcut icon" href="/logo.webp" type="image/x-icon">
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>
<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>




