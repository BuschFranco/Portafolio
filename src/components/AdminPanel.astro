---
---

<div class="adminPanel" style="display: none;">
    <button class="adminPanelBtn">Admin Panel</button>
    <div id="adminPanelContainer" style="display: none;">

    
    <form class="adminPanelForm" method="POST" >
        <div>
            <strong>Create a post</strong>
            <div>
                <label for="title">Ttile:</label>
                <input type="text" maxlength="30" id="createTitle" name="title" placeholder="Title" required>
            </div>
           
            <div>
                <label for="description">Desc:</label>
                <textarea class="description" name="description" maxlength="500" placeholder="Description" required></textarea>
            </div>
            <div>
                <label for="file">Image:</label>
                <input type="file" id="file" name="file" accept="image/*">
            </div>
        </div>    
        <input type="hidden" name="name" value="Busch Franco">
        <button type="submit">
            <span class="button-text">Upload</span>
            <span class="loading-spinner" style="display: none;"></span>
        </button>
    </form>
    <form class="adminPanelForm" method="PUT" action="">
        <div>
        <strong>Update a post</strong>
        <div>
            <label for="id">ID:</label>
            <input type="text" class="id" name="id" placeholder="Post ID" required>
        </div>
        <div>
            <label for="title">Ttile:</label>
            <input type="text" maxlength="30" class="title" name="title" placeholder="Title" required>
        </div>
       
        <div>
            <label for="description">Desc:</label>
            <textarea class="updateDescription" name="description" maxlength="500" placeholder="Description" required></textarea>
        </div>
        <div>
            <label for="file">Image:</label>
            <input type="file" id="file" name="file" accept="image/*">
        </div>
    </div>
    <button type="submit">
        <span class="button-text">Update</span>
        <span class="loading-spinner" style="display: none;"></span>
    </button>
</form>
        <form class="adminPanelForm" method="DELETE">
            <div>
                <strong>Delete a post</strong>
                <div>
                    <label for="deleteid">ID:</label>
                    <input type="text" id="deleteid" name="deleteid" placeholder="Post ID" required>
                </div>
            </div>			

            <button type="submit">
                <span class="button-text">Delete</span>
                <span class="loading-spinner" style="display: none;"></span>
            </button>
        </form>
    </div>
</div>

<script>
    

    document.querySelector('.adminPanelBtn').addEventListener('click', function(event){
		event.preventDefault();
		const form = document.querySelector('#adminPanelContainer');
		form.style.display = form.style.display === 'block' ? 'none' : 'block';
	});

	document.addEventListener('click', function(event) {
		const form = document.querySelector('.adminPanelForm');
		const adminBtn = document.querySelector('.adminPanelBtn');
		if (form.style.display === 'block' && !form.contains(event.target) && !adminBtn.contains(event.target)) {
			form.style.display = 'none';
		}
	});

    
    // Función para manejar las peticiones al API
async function sendRequest(url, method, data) {
    try {
        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        });

        if (!response.ok) {
            throw new Error(`HTTP Error: ${response.status}`);
        }

        const result = await response.json();
        console.log(result);
        alert(`${method} request successful!`);
        return result;
    } catch (error) {
        console.error(error);
        alert(`Error: ${error.message}`);
    }
}

// Crear un post
document.querySelector('.adminPanelForm[method="POST"]').addEventListener('submit', function (event) {
    event.preventDefault();

    const title = document.querySelector('#createTitle').value;
    const description = document.querySelector('.description').value;
    const name = document.querySelector('input[name="name"]').value;
    const file = document.querySelector('#file').files[0];

    
    const data = {
            title: title,
            description: description,
            name: name,
        };

        sendRequest('http://localhost:3000/api/posts', 'POST', data);
    
});

        const response = await fetch('http://localhost:3000/api/posts');
        const posts = await response.json();

        //const user = users.find(user => user.name === username && user.password === password);

// Actualizar un post
document.querySelector('.adminPanelForm[method="PUT"]').addEventListener('submit', function (event) {
    event.preventDefault();

    const id = document.querySelector('.id').value;
    const title = document.querySelector('.title').value; // Segundo input de título
    const description = document.querySelector('.updateDescription').value;
    
        const data = {
            title: title,
            description: description,
        };

        sendRequest(`http://localhost:3000/api/posts/${id}`, 'PUT', data);
});

// Eliminar un post
document.querySelector('.adminPanelForm[method="DELETE"]').addEventListener('submit', async function (event) {
    event.preventDefault();

    const id = document.querySelector('#deleteid').value;
    const method = 'DELETE';

    try {
        const response = await fetch(`http://localhost:3000/api/posts/${id}`, {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            },
        });

        if (!response.ok) {
            throw new Error(`HTTP Error: ${response.status}`);
        }

        const result = await response.json();
        console.log(result);
        alert(`${method} request successful!`);
        return result;
    } catch (error) {
        console.error(error);
        alert(`Error: ${error.message}`);
    }
});

</script>

<style>
     .adminPanel{
        position: absolute;
        top: 6rem;
        left: 8rem;
        width: auto;
        z-index: 9999;
    }

    .adminPanelBtn{
        border-radius: .9rem;
        padding: .7rem 1rem;
        font-weight: bold;
        border: 2px solid #c561f6;
        color: #222;
        box-shadow: 0 0 10px 1px #c561f6;
    }

    .adminPanelForm{
        color:  #c561f6;
        background-color: #1e0e27;
        padding: 1rem;
        border-radius: 0rem 1rem 1rem 1rem;
        margin-left: .5rem;
        box-shadow: 0 0 10px 2px #c561f6;
        width: 25rem;

        animation: slideLeftFadeIn 1s;
    
    }

    @media (max-width: 768px) {
        .adminPanelForm {
            width: 100%;
            margin-left: 0;
            animation: none;
        }
    }

    .adminPanelForm input{
        border-radius: .4rem;
        padding: .1rem;
        margin-top: .5rem;
        width: 80%;
        margin-left: .8rem;
        text-align: center;
        border: none;
    }.adminPanelForm textarea{
        width: 80%;
        height: 100px;
        margin-left: .8rem;
        border-radius: .4rem;
        padding: .1rem;
        text-align: center;
        border: none;
    }.adminPanelForm button{
        border-radius: .4rem;
        border: none;
        padding: .3rem 1rem;
        background-color: white;
        color: #1e0e27;
        font-weight: bold;
        box-shadow: 0 0 10px 1px #c561f6;
        transition: 0.6s;
    }

    #error{
        margin-left: 1rem;
        color: red;
        font-weight: bold;

        animation: slideLeftFadeIn 1.4s;
    }#message{
        margin: auto;
        color: rgb(0, 255, 0);
        font-weight: bold;

        animation: slideLeftFadeIn 1.4s;
    }

     /* >>>>>>>>>>>> Animaciones para botones y cargas <<<<<<<<<<<<<<<< */

  .loading-spinner {
    border: 3px solid rgba(255, 255, 255, 0.6);
    border-top: 3px solid rgb(0, 0, 0);
    border-radius: 50%;
    width: 1rem;
    height: 1rem;
    animation: spin 0.8s linear infinite;
    display: inline-block;
    vertical-align: middle;
  }@keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes slideLeftFadeIn {
      0% {
        transform: translateX(-3.5rem);
        opacity: 0;
      }
      100% {
        transform: translateX(0);
        opacity: 1;
      }
    }
</style>